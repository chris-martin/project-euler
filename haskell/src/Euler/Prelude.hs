module Euler.Prelude (module X) where

import Control.Applicative as X (liftA2)
import Control.Arrow as X ((&&&))
import Control.Monad as X (guard, join)
import Data.Bifunctor as X (bimap)
import Data.Char as X (digitToInt)
import Data.Foldable as X (foldr', toList, maximumBy)
import Data.Function as X ((&), on)
import Data.List as X (find, findIndex, group, inits, intercalate, permutations, sort)
import Data.List.NonEmpty as X (NonEmpty(..), nonEmpty)
import Data.Map as X (Map)
import Data.Maybe as X (catMaybes, fromJust, isJust, mapMaybe)
import Data.Monoid as X ((<>))
import Data.Numbers.Primes as X (isPrime, primes)
import Data.Ord as X (compare, comparing)
import Data.Ratio as X (Ratio, (%), numerator, denominator)
import Data.Set as X (Set, (\\))
import Data.SetMap as X (SetMap)
import Data.Text as X (Text, unpack)
